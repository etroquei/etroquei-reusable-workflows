name: "Rollback automatizado"

on:
  workflow_call:
    inputs:
      issue_number:
        description: 'O número da Issue que acionou o processo.'
        required: true
        type: string
      target_branch:
        description: 'A branch alvo para o rollback.'
        required: false
        type: string
        default: 'main'

jobs:
  # ETAPA 1: INICIAR E NOTIFICAR
  iniciar:
    name: "1. Iniciar processo"
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: "Comentar na Issue sobre o início do processo"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ inputs.issue_number }};
            const run_url = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const comment_body = `⏳ **Processo de Rollback Automatizado Iniciado...**\n\nAcompanhe o progresso em tempo real: [Verificar Log da Action](${run_url}  )`;
            await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: issue_number, body: comment_body });

  # ETAPA 2: CRIAR O PULL REQUEST DE REVERSÃO
  criar_pr:
    name: "2. Criar PR de Rollback"
    runs-on: ubuntu-latest
    needs: iniciar
    permissions:
      contents: write
      pull-requests: write
    outputs:
      pr_number: ${{ steps.create_revert_pr.outputs.pr_number }}
      pr_url: ${{ steps.create_revert_pr.outputs.pr_url }}
    steps:
      - name: "Fazer checkout do código"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Reverter, Criar Branch e Abrir PR"
        id: create_revert_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET_BRANCH: ${{ inputs.target_branch }}
          ISSUE_NUMBER: ${{ inputs.issue_number }}
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions-bot@github.com"

          LAST_PR_NUMBER=$(gh pr list --base "$TARGET_BRANCH" --state merged --limit 1 --json number --jq '.[0].number')
          MERGE_COMMIT_SHA=$(gh pr list --base "$TARGET_BRANCH" --state merged --limit 1 --json mergeCommit --jq '.[0].mergeCommit.oid')

          if [ -z "$MERGE_COMMIT_SHA" ]; then
            echo "::error::Nenhum commit de merge encontrado para o último PR."
            exit 1
          fi
          
          echo "Último PR encontrado: #${LAST_PR_NUMBER}"
          echo "Commit de merge a ser revertido: ${MERGE_COMMIT_SHA}"

          REVERT_BRANCH_NAME="revert-pr-${LAST_PR_NUMBER}"

          # Limpeza de execuções anteriores
          git push origin --delete "$REVERT_BRANCH_NAME" || true
          
          # Lógica de Git
          git checkout -b "$REVERT_BRANCH_NAME"
          git revert --no-commit -m 1 "$MERGE_COMMIT_SHA"
          git commit -m "Revert: Reversão automática do PR #${LAST_PR_NUMBER}"
          git push origin "$REVERT_BRANCH_NAME"

          # Lógica de criação do PR
          PR_URL=$(gh pr create --title "[Rollback] Reversão automática do PR #${LAST_PR_NUMBER}" \
                                --body "Este PR foi criado automaticamente para reverter as alterações do PR #${LAST_PR_NUMBER}. Acionado pela Issue #${ISSUE_NUMBER}." \
                                --base "$TARGET_BRANCH" \
                                --head "$REVERT_BRANCH_NAME")
          
          PR_NUMBER=$(echo "$PR_URL" | rev | cut -d'/' -f1 | rev)

          echo "PR de reversão criado: ${PR_URL}"
          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "pr_url=${PR_URL}" >> $GITHUB_OUTPUT

  # ETAPA 3: FAZER O MERGE DO PULL REQUEST
  merge_pr:
    name: "3. Fazer Merge do PR"
    runs-on: ubuntu-latest
    needs: criar_pr
    permissions:
      pull-requests: write
      contents: write
    outputs:
      merge_commit_sha: ${{ steps.merge.outputs.sha }}
    steps:
      - name: "Fazer checkout do código"
        uses: actions/checkout@v4

      - name: "Fazer merge do PR de reversão"
        id: merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ needs.criar_pr.outputs.pr_number }}
        run: |
          echo "Tentando fazer merge do PR número: $PR_NUMBER"
          if [ -z "$PR_NUMBER" ]; then
            echo "::error::Número do PR não recebido do job anterior."
            exit 1
          fi
          # Este comando agora será executado dentro de um repositório clonado.
          MERGE_COMMIT_SHA=$(gh pr merge "$PR_NUMBER" --squash --delete-branch --admin)
          echo "PR #${PR_NUMBER} mergeado com sucesso. Commit: ${MERGE_COMMIT_SHA}"
          echo "sha=${MERGE_COMMIT_SHA}" >> $GITHUB_OUTPUT

  # ETAPA 4: FINALIZAR E NOTIFICAR
  finalizar:
    name: "4. Finalizar e Notificar"
    runs-on: ubuntu-latest
    if: always()
    needs: [iniciar, criar_pr, merge_pr]
    permissions:
      issues: write
    steps:
      - name: "Verificar status e comentar na Issue"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ inputs.issue_number }};
            const pr_url = "${{ needs.criar_pr.outputs.pr_url }}";
            const merge_commit_sha = "${{ needs.merge_pr.outputs.merge_commit_sha }}";
            const merge_commit_url = `https://github.com/${{ github.repository }}/commit/${merge_commit_sha}`;
            const status_criar_pr = "${{ needs.criar_pr.result }}";
            const status_merge_pr = "${{ needs.merge_pr.result }}";

            let final_comment;

            if (status_criar_pr === 'failure' || status_merge_pr === 'failure'  ) {
              final_comment = `❌ **Processo de Rollback falhou!**\n\nOcorreu um erro durante a automação. Por favor, verifique os [logs da Action](${github.server_url}/${{ github.repository }}/actions/runs/${{ github.run_id }}) para mais detalhes.`;
            } else {
              final_comment = `✅ **Rollback concluído com sucesso!**\n\nAs alterações foram revertidas automaticamente.\n\n- **Pull Request de Reversão:** [${pr_url}](${pr_url})\n- **Commit de Merge da Reversão:** [${merge_commit_sha.substring(0,7)}](${merge_commit_url})`;
            }
            
            await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: issue_number, body: final_comment });
