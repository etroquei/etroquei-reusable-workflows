name: "Rollback automatizado"

on:
  workflow_call:
    inputs:
      issue_number:
        description: 'O número da Issue que acionou o processo.'
        required: true
        type: string
      target_branch:
        description: 'A branch alvo para o rollback.'
        required: false
        type: string
        default: 'main'
    secrets:
      GH_TOKEN:
        description: 'GITHUB_TOKEN com permissões necessárias.'
        required: true

jobs:
  # ETAPA 1: INICIAR E NOTIFICAR
  iniciar:
    name: "1. Iniciar e notificar"
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: "Comentar na Issue sobre o início do processo"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const issue_number = ${{ inputs.issue_number }};
            const run_url = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            
            const comment_body = `
            ⏳ **Processo de Rollback iniciado...**

            A automação foi acionada. Você pode acompanhar o progresso em tempo real no seguinte link:
            👉 **[Verificar Log da Action](${run_url} )**
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: comment_body
            });

  # ETAPA 2: PREPARAR A REVERSÃO (Depende da Etapa 1)
  preparar:
    name: "2. Preparar Rollback"
    runs-on: ubuntu-latest
    needs: iniciar # Garante que esta etapa só rode após a 'iniciar'
    permissions:
      pull-requests: read
    # Passamos os resultados deste job para os próximos
    outputs:
      pr_found: ${{ steps.find_pr.outputs.pr_found }}
      pr_number: ${{ steps.find_pr.outputs.pr_number }}
      pr_title: ${{ steps.find_pr.outputs.pr_title }}
      revert_url: ${{ steps.find_pr.outputs.revert_url }}
    steps:
      - name: "Encontrar último PR mergeado"
        id: find_pr
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          TARGET_BRANCH: ${{ inputs.target_branch }}
        run: |
          PR_DATA=$(gh pr list --base "$TARGET_BRANCH" --state merged --limit 1 --json number,url,title)
          if [ -z "$PR_DATA" ] || [ "$PR_DATA" == "[]" ]; then
            echo "pr_found=false" >> $GITHUB_OUTPUT
          else
            echo "pr_found=true" >> $GITHUB_OUTPUT
            echo "pr_number=$(echo "$PR_DATA" | jq -r '.[0].number')" >> $GITHUB_OUTPUT
            echo "pr_title=$(echo "$PR_DATA" | jq -r '.[0].title')" >> $GITHUB_OUTPUT
            echo "revert_url=$(echo "$PR_DATA" | jq -r '.[0].url')/revert" >> $GITHUB_OUTPUT
          fi

  # ETAPA 3: NOTIFICAR SOBRE A REVERSÃO (Depende da Etapa 2)
  notificar_reversao:
    name: "3. Notificar Rollback pronto"
    runs-on: ubuntu-latest
    needs: preparar # Garante que esta etapa só rode após a 'preparar'
    # Só executa se um PR foi encontrado na etapa anterior
    if: needs.preparar.outputs.pr_found == 'true'
    permissions:
      issues: write
    steps:
      - name: "Comentar na Issue com o link da Action"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const issue_number = ${{ inputs.issue_number }};
            const pr_number = "${{ needs.preparar.outputs.pr_number }}";
            const pr_title = "${{ needs.preparar.outputs.pr_title }}";
            const revert_url = "${{ needs.preparar.outputs.revert_url }}";
            const target_branch = "${{ inputs.target_branch }}";

            const comment_body = `
            ✅ **Rollback pronto para confirmação!**

            O último Pull Request mergeado na branch \`${target_branch}\` foi o **[#${pr_number}: ${pr_title}](${revert_url})**.

            Para finalizar, um membro da equipe deve clicar no link abaixo para criar o Pull Request de Rollback.

            👉 ### **[Clique aqui para Criar o PR de Rollback](${revert_url})**
            `;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: comment_body
            });

  # ETAPA 4: FINALIZAR E NOTIFICAR O STATUS FINAL (Depende das etapas anteriores)
  finalizar:
    name: "4. Finalizar"
    runs-on: ubuntu-latest
    # 'always()' garante que este job sempre rode, mesmo que um dos anteriores falhe ou seja pulado
    if: always() 
    needs: [iniciar, preparar, notificar_reversao]
    permissions:
      issues: write
    steps:
      - name: "Verificar status e comentar na Issue"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const issue_number = ${{ inputs.issue_number }};
            const preparacao_status = "${{ needs.preparar.result }}";
            const notificacao_status = "${{ needs.notificar_reversao.result }}";

            let final_comment;

            if (preparacao_status === 'failure') {
              final_comment = `
              ❌ **Processo de Rollback falhou!**

              Ocorreu um erro inesperado durante a etapa de preparação. Por favor, verifique os [logs da Action](${github.server_url}/${{ github.repository }}/actions/runs/${{ github.run_id }}) para mais detalhes.
              `;
            } else if (notificacao_status === 'skipped') {
              final_comment = `
              ⚠️ **Processo concluído com aviso.**

              A automação não encontrou um Pull Request para reverter na branch \`${{ inputs.target_branch }}\`. Nenhuma ação foi tomada.
              `;
            } else {
              final_comment = `
              🏁 **Processo finalizado.**

              A automação concluiu a análise. O link para a criação do PR de Rollback foi postado acima.
              `;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: final_comment
            });
